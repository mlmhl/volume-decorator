/*
 * Tencent is pleased to support the open source community by making TKEStack available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	storagev1 "tkestack.io/volume-decorator/pkg/apis/storage/v1"
)

// FakePersistentVolumeClaimRuntimes implements PersistentVolumeClaimRuntimeInterface
type FakePersistentVolumeClaimRuntimes struct {
	Fake *FakeStorageV1
	ns   string
}

var persistentvolumeclaimruntimesResource = schema.GroupVersionResource{Group: "storage.k8s.io", Version: "v1", Resource: "persistentvolumeclaimruntimes"}

var persistentvolumeclaimruntimesKind = schema.GroupVersionKind{Group: "storage.k8s.io", Version: "v1", Kind: "PersistentVolumeClaimRuntime"}

// Get takes name of the persistentVolumeClaimRuntime, and returns the corresponding persistentVolumeClaimRuntime object, and an error if there is any.
func (c *FakePersistentVolumeClaimRuntimes) Get(name string, options v1.GetOptions) (result *storagev1.PersistentVolumeClaimRuntime, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(persistentvolumeclaimruntimesResource, c.ns, name), &storagev1.PersistentVolumeClaimRuntime{})

	if obj == nil {
		return nil, err
	}
	return obj.(*storagev1.PersistentVolumeClaimRuntime), err
}

// List takes label and field selectors, and returns the list of PersistentVolumeClaimRuntimes that match those selectors.
func (c *FakePersistentVolumeClaimRuntimes) List(opts v1.ListOptions) (result *storagev1.PersistentVolumeClaimRuntimeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(persistentvolumeclaimruntimesResource, persistentvolumeclaimruntimesKind, c.ns, opts), &storagev1.PersistentVolumeClaimRuntimeList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &storagev1.PersistentVolumeClaimRuntimeList{ListMeta: obj.(*storagev1.PersistentVolumeClaimRuntimeList).ListMeta}
	for _, item := range obj.(*storagev1.PersistentVolumeClaimRuntimeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested persistentVolumeClaimRuntimes.
func (c *FakePersistentVolumeClaimRuntimes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(persistentvolumeclaimruntimesResource, c.ns, opts))

}

// Create takes the representation of a persistentVolumeClaimRuntime and creates it.  Returns the server's representation of the persistentVolumeClaimRuntime, and an error, if there is any.
func (c *FakePersistentVolumeClaimRuntimes) Create(persistentVolumeClaimRuntime *storagev1.PersistentVolumeClaimRuntime) (result *storagev1.PersistentVolumeClaimRuntime, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(persistentvolumeclaimruntimesResource, c.ns, persistentVolumeClaimRuntime), &storagev1.PersistentVolumeClaimRuntime{})

	if obj == nil {
		return nil, err
	}
	return obj.(*storagev1.PersistentVolumeClaimRuntime), err
}

// Update takes the representation of a persistentVolumeClaimRuntime and updates it. Returns the server's representation of the persistentVolumeClaimRuntime, and an error, if there is any.
func (c *FakePersistentVolumeClaimRuntimes) Update(persistentVolumeClaimRuntime *storagev1.PersistentVolumeClaimRuntime) (result *storagev1.PersistentVolumeClaimRuntime, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(persistentvolumeclaimruntimesResource, c.ns, persistentVolumeClaimRuntime), &storagev1.PersistentVolumeClaimRuntime{})

	if obj == nil {
		return nil, err
	}
	return obj.(*storagev1.PersistentVolumeClaimRuntime), err
}

// Delete takes name of the persistentVolumeClaimRuntime and deletes it. Returns an error if one occurs.
func (c *FakePersistentVolumeClaimRuntimes) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(persistentvolumeclaimruntimesResource, c.ns, name), &storagev1.PersistentVolumeClaimRuntime{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePersistentVolumeClaimRuntimes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(persistentvolumeclaimruntimesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &storagev1.PersistentVolumeClaimRuntimeList{})
	return err
}

// Patch applies the patch and returns the patched persistentVolumeClaimRuntime.
func (c *FakePersistentVolumeClaimRuntimes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *storagev1.PersistentVolumeClaimRuntime, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(persistentvolumeclaimruntimesResource, c.ns, name, pt, data, subresources...), &storagev1.PersistentVolumeClaimRuntime{})

	if obj == nil {
		return nil, err
	}
	return obj.(*storagev1.PersistentVolumeClaimRuntime), err
}
